#!/bin/bash

# * The way .travis.yml is fed to the command controller is idiotic - it
# makes using multiline `bash -c` statements impossible. Therefore to
# aid readability (our travis logic is rather complex), the bulk of
# functionality is moved to a script. More about the problem here:
# https://github.com/travis-ci/travis-ci/issues/497

set -e

echo_err() { echo "$@" 1>&2 ; }

tstamp() { echo -n "[$(date '+%H:%M:%S')]" ; }

run_or_err() {
  echo_err -n "$(tstamp) $1 ... "

  LASTOUT=$( bash -c "$2" 2>&1)
  LASTEXIT=$?
  if [[ "$LASTEXIT" != "0" ]] ; then
    echo_err -e "FAILED !!!\nCommand executed:\n$2\nSTDOUT+STDERR:\n$LASTOUT"
    return $LASTEXIT
  else
    echo_err "done."
  fi
}

if [[ "$TRAVIS" != "true" ]] ; then
  echo_err "Running this script makes no sense outside of travis-ci"
  exit 1
fi

#
# Current dir is the root of the DBIC checkout (make sure to
# come back there if moving around before end of this script)
#
# envvars available for us:
#
# NUMTHREADS = { number}
#   dynamically determined amount of threads we want to run on this
#   smoker concurrently
#
# CLEANTEST = [ true | false ]
#   controls whether we simulate a "user-side" install experience
#   that is - no author deps and no M::I installation
#
# BREWVER = { tripple dotted perl version, e.g. 5.8.3 }
#   brew a custom perl version such and such
#
# BREWOPTS = { string to be fed unquoted to perlbrew, e.g. -Duseithreads }
#   build options for perlbrew
#

echo_err "$(tstamp) Smoke preconfiguration starting $(date)"

TRAVIS_CPAN_MIRROR=$(echo "$PERL_CPANM_OPT" | grep -oP -- '--mirror\s+\S+' | head -n 1 | cut -d ' ' -f 2)
if ! [[ "$TRAVIS_CPAN_MIRROR" =~ "http://" ]] ; then
  echo_err "Unable to extract primary cpan mirror from PERL_CPANM_OPT - something is wrong"
  echo_err "PERL_CPANM_OPT: $PERL_CPANM_OPT"
  exit 1
fi

export PERL_MM_USE_DEFAULT=1 PERL_MM_NONINTERACTIVE=1 PERL_AUTOINSTALL_PREFER_CPAN=1 PERLBREW_CPAN_MIRROR="$TRAVIS_CPAN_MIRROR"

# Fixup CPANM_OPT to behave more like a traditional cpan client
export PERL_CPANM_OPT="$( echo $PERL_CPANM_OPT | sed 's/--skip-satisfied//' )"

if [[ -n "$BREWVER" ]] ; then
  # if this is not master and not a smoke/ branch - cancel all testing
  if [[ "$TRAVIS_BRANCH" =~ "topic/" ]]; then
    export SHORT_CIRCUIT_SMOKE=1
    echo_err "$(tstamp) non-smoke branch and custom perl compilation requested - bailing out"
    sleep 20  # give the console time to attach, otherwise it hangs
    return  # this is like an `exit 0` in sourcing
  fi

  run_or_err "Compiling/installing Perl $BREWVER (without testing, may take up to 5 minutes)" \
    "perlbrew install --as $BREWVER --notest $BREWOPTS -j $NUMTHREADS perl-$BREWVER"

  perlbrew use $BREWVER
fi

# configure CPAN.pm - older versions go into an endless loop
# when trying to autoconf themselves
CPAN_CFG_SCRIPT="
  require CPAN;
  require CPAN::FirstTime;
  *CPAN::FirstTime::conf_sites = sub {};
  CPAN::Config->load;
  \$CPAN::Config->{urllist} = [qw{ $TRAVIS_CPAN_MIRROR }];
  \$CPAN::Config->{halt_on_failure} = 1;
  CPAN::Config->commit;
"
run_or_err "Configuring CPAN.pm" "perl -e '$CPAN_CFG_SCRIPT'"

extract_prereqs() {
  # hack-hack-hack
  COMBINED_OUT="$( { stdout="$(cpanm --quiet --scandeps --format tree "$@")" ; } 2>&1; echo "!!!STDERRSTDOUTSEPARATOR!!!$stdout")" \
    || LASTEXIT=$?

  OUT=${COMBINED_OUT#*!!!STDERRSTDOUTSEPARATOR!!!}
  ERR=$(grep -v " is up to date." <<< "${COMBINED_OUT%!!!STDERRSTDOUTSEPARATOR!!!*}")

  [[ -n "$LASTEXIT" ]] || LASTEXIT=0
  if [[ "$LASTEXIT" != "0" ]] || [[ -n "$ERR" ]] ; then
    echo_err "$(echo -e "Error occured (exit code $LASTEXIT) retrieving dependencies of $@:\n$ERR\n$OUT")"
    exit 1
  fi

  # throw away non-children (what was in $@), throw away ascii art, convert to modnames
  perl -p -e 's/^\s*[^\\].+//; s/^[^A-Za-z]+//; s/\-[^\-]+$/ /; s/\-/::/g' <<< "$OUT"
}

parallel_installdeps_notest() {
  if [[ -z "$@" ]] ; then return; fi

  # flatten list into one string
  MODLIST=$(echo "$@")

  # The reason we do things so "non-interactively" is that xargs -P will have the
  # latest cpanm instance overwrite the buildlog. There seems to be no way to
  # specify a custom buildlog, hence we just collect the verbose output
  # and display it in case of failure
  run_or_err "Installing (without testing) $MODLIST" \
    "echo $MODLIST | xargs -n 1 -P $NUMTHREADS cpanm --verbose --no-interactive --notest --no-man-pages"
}

# Install *hard dep* modules that typically appear in more than one dep
#
# *NEVER* add optional depenencies here - will make CLEANTEST=true smokes useless
#
# do it in several passes to minimize amount of cross-deps installing multiple
# times, and to avoid module re-architecture breaking another install
# (e.g. once Carp is upgraded there's no more Carp::Heavy)
#
parallel_installdeps_notest $(extract_prereqs Module::Build)
parallel_installdeps_notest Test::Exception Test::Fatal Module::Runtime Carp
parallel_installdeps_notest Sub::Name multidimensional namespace::clean Class::XSAccessor MRO::Compat
parallel_installdeps_notest DBI Moo Class::Accessor::Grouped

if [[ "$CLEANTEST" = "true" ]]; then
  # get the last inc/ off cpan - we will get rid of MI
  # soon enough, but till then this will do
  # the point is to have a *really* clean perl (the ones
  # we build are guaranteed to be clean, without side
  # effects from travis preinstalls)

  # trick cpanm into executing true as shell - we just need the find+unpack
  run_or_err "Downloading DBIC inc/ from CPAN" \
    "SHELL=/bin/true cpanm --look DBIx::Class"

  mv ~/.cpanm/latest-build/DBIx-Class-*/inc .
else
  # we will be running all tests - preinstall MOAR stuff, run basic tests using SQLT
  # and set up whatever databases necessary
  parallel_installdeps_notest Module::Install DateTime::Format::Strptime MooseX::Types JSON::Any Class::DBI

  export DBICTEST_SQLT_DEPLOY=1

### apt-get invocation - faster to grab everything at once
  #
  # FIXME these debconf lines should automate the firebird config but do not :(((
  sudo bash -c 'echo -e "firebird2.5-super\tshared/firebird/enabled\tboolean\ttrue" | debconf-set-selections'
  sudo bash -c 'echo -e "firebird2.5-super\tshared/firebird/sysdba_password/new_password\tpassword\t123" | debconf-set-selections'

  APT_PACKAGES="memcached firebird2.5-super firebird2.5-dev expect"
  run_or_err "Installing packages ($APT_PACKAGES)" "sudo apt-get install -y $APT_PACKAGES"

### memcached
  export DBICTEST_MEMCACHED=127.0.0.1:11211

### mysql
  run_or_err "Creating MySQL TestDB" "mysql -e 'create database dbic_test;'"
  export DBICTEST_MYSQL_DSN='dbi:mysql:database=dbic_test;host=127.0.0.1'
  export DBICTEST_MYSQL_USER=root

### pg
  run_or_err "Creating PostgreSQL TestDB" "psql -c 'create database dbic_test;' -U postgres"
  export DBICTEST_PG_DSN='dbi:Pg:database=dbic_test;host=127.0.0.1'
  export DBICTEST_PG_USER=postgres

### firebird
  # poor man's deb config
  EXPECT_FB_SCRIPT='
    spawn dpkg-reconfigure --frontend=text firebird2.5-super
    expect "Enable Firebird server?"
    send "\177\177\177\177yes\r"
    expect "Password for SYSDBA"
    send "123\r"
    sleep 1
    wait
    sleep 1
  '
  run_or_err "Re-configuring Firebird" "
    sync
    DEBIAN_FRONTEND=text sudo expect -c '$EXPECT_FB_SCRIPT'
    sleep 1
    sync
    # restart the server for good measure
    sudo /etc/init.d/firebird2.5-super stop || true
    sleep 1
    sync
    sudo /etc/init.d/firebird2.5-super start
    sleep 1
    sync
  "

  # creating testdb
  # FIXME - this step still fails from time to time >:(((
  # has to do with the FB reconfiguration I suppose
  # for now if it fails - simply skip FB testing
  if run_or_err "Creating Firebird TestDB" \
    "echo \"CREATE DATABASE '/var/lib/firebird/2.5/data/dbic_test.fdb';\" | sudo isql-fb -u sysdba -p 123"
  then
    # the official version is full of 5.10-isms, but works perfectly fine on 5.8
    # pull in our patched copy
    run_or_err "Fetching patched DBD::Firebird" \
      "git clone https://github.com/dbsrgits/perl-dbd-firebird-5.8.git ~/dbd-firebird"

    # the official version is very much outdated and does not compile on 5.14+
    # use this rather updated source tree (needs to go to PAUSE):
    # https://github.com/pilcrow/perl-dbd-interbase
    run_or_err "Fetching patched DBD::InterBase" \
      "git clone https://github.com/dbsrgits/perl-dbd-interbase ~/dbd-interbase"

    parallel_installdeps_notest ~/dbd-interbase/ ~/dbd-firebird/

    export DBICTEST_FIREBIRD_DSN=dbi:Firebird:dbname=/var/lib/firebird/2.5/data/dbic_test.fdb
    export DBICTEST_FIREBIRD_USER=SYSDBA
    export DBICTEST_FIREBIRD_PASS=123

    export DBICTEST_FIREBIRD_INTERBASE_DSN=dbi:InterBase:dbname=/var/lib/firebird/2.5/data/dbic_test.fdb
    export DBICTEST_FIREBIRD_INTERBASE_USER=SYSDBA
    export DBICTEST_FIREBIRD_INTERBASE_PASS=123
  fi

### oracle
  # FIXME: todo
  #DBICTEST_ORA_DSN=dbi:Oracle:host=localhost;sid=XE
  #DBICTEST_ORA_USER=dbic_test
  #DBICTEST_ORA_PASS=123
  #DBICTEST_ORA_EXTRAUSER_DSN=dbi:Oracle:host=localhost;sid=XE
  #DBICTEST_ORA_EXTRAUSER_USER=dbic_test_extra
  #DBICTEST_ORA_EXTRAUSER_PASS=123
  #ORACLE_HOME=/usr/lib/oracle/xe/app/oracle/product/10.2.0/client
fi

# generate the makefile which will have different deps depending on
# the runmode and envvars set above
run_or_err "Configure on current branch" "perl Makefile.PL"

# install the remaining dependencies
parallel_installdeps_notest $(make listalldeps)

# make sure we got everything we need
perl Makefile.PL &> /dev/null
if [[ -n "$(make listdeps)" ]] ; then
  echo_err "$(tstamp) Not all deps installed - something went wrong :("
  make listdeps
  exit 1
fi

run_or_err "Prepare blib" "make pure_all"

# announce what are we running
echo_err "
========================= CONFIGURATION COMPLETE ===========================
Configuration phase seems to have taken $(date -ud "@$SECONDS" '+%H:%M:%S') (@$SECONDS)

= CPUinfo
$(perl -0777 -p -e 's/.+\n\n(?!\z)//s' < /proc/cpuinfo)

= Meminfo
$(free -m -t)

= Environment
$(env | grep -P 'TEST|TRAVIS|PERL|DBIC' | LC_ALL=C sort | cat -v)

= Perl in use
$(perl -V)
============================================================================

$(tstamp) Starting tests using $NUMTHREADS concurrent processes"
